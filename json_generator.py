import json
import numpy as np
import pandas as pd

def generate_nested_json(rows, columns):
    """
    The function `generate_nested_json` creates a nested JSON structure with the specified number of
    rows and columns.
    
    :param rows: The `rows` parameter in the `generate_nested_json` function represents the number of
    rows you want to generate in the nested JSON structure. Each row will contain a set of columns with
    nested structures
    :param columns: The `columns` parameter in the `generate_nested_json` function represents the number
    of columns in each row of the nested JSON structure that will be generated. Each column will contain
    a nested structure generated by the `generate_nested_structure` function
    :return: The function `generate_nested_json` returns a list of dictionaries, where each dictionary
    represents a row with nested structures in the specified number of columns.
    """
    data = []

    for _ in range(rows):
        row = {}
        for col_num in range(columns):
            nested_structure = generate_nested_structure()
            row[col_num + 1] = nested_structure
        data.append(row)

    return data

def generate_nested_structure():
    # Randomly choose between string, float, and integer
    data_type = np.random.choice(["string", "float", "integer",'date', 'boolean'])

    if data_type == "string":
        return f"string_value_{np.random.randint(1, 1000)}"
    elif data_type == "float":
        return round(np.random.uniform(1.0, 100.0))
    elif data_type == "integer":
        return np.random.randint(1, 1000)
    elif data_type == "date":
        return pd.Timestamp(np.random.choice(pd.date_range(start='2010-01-01', end='2024-01-01', freq='D')))
    elif data_type == "boolean":
        return bool(np.random.randint(2))
    

def save_to_json(data, filename):
    """
    The function `save_to_json` saves data to a JSON file with specified filename.
    
    :param data: Data is the information or object that you want to save to a JSON file. It could be a
    dictionary, list, or any other Python object that can be serialized into JSON format
    :param filename: The `filename` parameter in the `save_to_json` function is a string that represents
    the name of the file where the data will be saved in JSON format. It should include the file
    extension, such as ".json", to indicate that the data will be stored in JSON format
    """
    with open(filename, 'w') as file:
        json.dump(data, file, indent=2, sort_keys=True, default=str)

# Adjust the desired number of rows and columns
num_rows = 1
num_columns = 200

# Generate the nested JSON data
json_data = generate_nested_json(num_rows, num_columns)

# Save the JSON data to a file
save_to_json(json_data, 'nested_data.json')
